import telebot
import logging
import sys
import time
from telebot.types import (
    BotCommand,
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from peewee import IntegrityError
from models import User, Bio, create_models
from settings import (
    BOT_TOKEN,
    DEFAULT_COMMANDS,
    edit_profile_keyboard,
    categories_keyboard,
    button_back_to_categories,
    subcategories_category_1,
    subcategories_category_3,
    choice_category_keyboard,
)

logging.basicConfig(
    filename='bot_error.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

bot = telebot.TeleBot(BOT_TOKEN)


def get_user_profile_photo(user_id: int):
    try:
        photos = bot.get_user_profile_photos(user_id)
        if photos.photos:
            file_id = photos.photos[0][-1].file_id
            return file_id
        else:
            return None
    except:
        return None


@bot.message_handler(commands=['start'])
def start(message: Message) -> None:
    user_id: int = message.from_user.id
    username: str = message.from_user.username or f"user_{user_id}"

    try:
        User.create(
            user_id=user_id,
            username=username,
        )
        Bio.create(
            user=User.get_or_none(user_id=user_id)
        )
        bot.send_message(
            message.chat.id,
            f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–Ø –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ –º–∏—Ä–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ‚ú®\n\n–ü–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ '
            '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚úÖ\n\n‚ÄºÔ∏è–ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å /profile\n\n–ù—É –∞ –µ—Å–ª–∏ '
            '–Ω–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –Ω—É–∂–Ω–æ –æ—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –Ω–∏–∂–µ üëáüèª',
            reply_markup=categories_keyboard()
        )
    except IntegrityError:
        user = User.get(User.user_id == user_id)
        bio = Bio.get_or_none(Bio.user == user)
        name = bio.name if bio and bio.name else username
        bot.reply_to(message,
                     f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {name}! –Ø —Å–Ω–æ–≤–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å ü´°\n\n–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "
                     f"–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨áÔ∏è", reply_markup=categories_keyboard())


@bot.message_handler(commands=['profile'])
def profile(message: Message) -> None:
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)

    if user is None:
        bot.reply_to(message, "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        return

    bio = Bio.get_or_none(Bio.user == user)

    name = bio.name if bio and bio.name else '‚Äî'
    category = bio.category if bio and bio.category else '‚Äî'
    phone = bio.phone if bio and bio.phone else '‚Äî'
    instagram = bio.instagram if bio and bio.instagram else '‚Äî'
    tiktok = bio.tiktok if bio and bio.tiktok else '‚Äî'
    about = bio.about if bio and bio.about else '‚Äî'

    photo_file_id = get_user_profile_photo(message.from_user.id)

    profile_text = (
        f'(—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –º–µ–Ω—è–µ—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)\n\n\n'
        f'–ò–º—è: {name}\n\n'
        f'–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {category}\n\n'
        f'–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n'
        f'Instagram: {instagram}\n\n'
        f'TikTok: {tiktok}\n\n'
        f'–û —Å–µ–±–µ:\n\n{about}'
    )

    if photo_file_id:
        bot.send_photo(
            message.chat.id,
            photo=photo_file_id,
            caption=profile_text
        )
    else:
        try:
            with open("default_photo.jpg", 'rb') as photo:
                bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=profile_text
                )
        except FileNotFoundError:
            bot.send_message(message.chat.id, profile_text)

    if bio and bio.portfolio:
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
        markup.add(
            InlineKeyboardButton(
                'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                url=bio.portfolio
            )
        )
        bot.send_message(
            message.chat.id,
            '–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:',
            reply_markup=markup
        )

    bot.send_message(
        message.chat.id,
        '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
        reply_markup=edit_profile_keyboard()
    )


@bot.message_handler(commands=['search'])
def search(message: Message):
    bot.send_message(
        message.chat.id,
        '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª',
        reply_markup=categories_keyboard()
    )


@bot.message_handler(commands=['about'])
def search(message: Message):
    bot.send_message(
        message.chat.id,
        '–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞'
    )


@bot.message_handler(commands=['help'])
def search(message: Message):
    bot.send_message(
        message.chat.id,
        '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞'
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_1')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤ üëáüèª',
        reply_markup=subcategories_category_1()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_2')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–í–µ–¥—É—â–∏–µ¬ª',
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–í–µ–¥—É—â–∏–µ')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–í–µ–¥—É—â–∏–µ¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_3')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª',
        reply_markup=subcategories_category_3()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_4')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_5')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_6')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_7')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ê–Ω–∏–º–∞—Ç–æ—Ä—ã¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–ê–Ω–∏–º–∞—Ç–æ—Ä—ã')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ê–Ω–∏–º–∞—Ç–æ—Ä—ã¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_8')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_9')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'category_10')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'musicians_1')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–í–æ–∫–∞–ª–∏—Å—Ç—ã¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–í–æ–∫–∞–ª–∏—Å—Ç—ã')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–í–æ–∫–∞–ª–∏—Å—Ç—ã¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'musicians_2')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'musicians_3')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–î—É—ç—Ç¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–î—É—ç—Ç')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–î—É—ç—Ç¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'musicians_4')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–õ–∞–π–≤-–±—ç–Ω–¥¬ª'
    )

    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–õ–∞–π–≤-–±—ç–Ω–¥')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–õ–∞–π–≤-–±—ç–Ω–¥¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'musicians_5')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'media_1')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'media_2')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'media_3')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ¬´–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è¬ª'
    )
    users_with_category = (
        Bio.select(Bio, User)
        .join(User)
        .where(Bio.category == '–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è')
    )

    if users_with_category:
        for bio in users_with_category:
            message_text = (
                f"üë§ {bio.name}\n"
                f"üìû {bio.phone}\n"
            )

            markup = InlineKeyboardMarkup()
            details_button = InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ü™™",
                callback_data=f"user_details_{bio.user.user_id}"
            )
            markup.add(details_button)

            bot.send_message(
                call.message.chat.id,
                message_text,
                reply_markup=markup
            )
    else:
        bot.send_message(
            call.message.chat.id,
            "–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è¬ª –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        )

    bot.send_message(
        call.message.chat.id,
        '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞',
        reply_markup=button_back_to_categories()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_categories')
def handle_subcategory(call: CallbackQuery):
    bot.send_message(
        call.message.chat.id,
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª',
        reply_markup=categories_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_profile_handler(call: CallbackQuery):
    if call.data == 'edit_name':
        bot.send_message(
            call.message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –∏–º—è üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_name)
    elif call.data == 'edit_phone':
        bot.send_message(
            call.message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_phone)
    elif call.data == 'edit_about':
        bot.send_message(
            call.message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_about)
    elif call.data == 'edit_instagram':
        bot.send_message(
            call.message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Instagram üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_instagram)
    elif call.data == 'edit_tiktok':
        bot.send_message(
            call.message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π TikTok üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_tiktok)
    elif call.data == 'edit_portfolio':
        bot.send_message(
            call.message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üëáüèª',
        )
        bot.register_next_step_handler(call.message, input_portfolio)
    elif call.data == 'edit_category':
        bot.send_message(
            call.message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëáüèª',
            reply_markup=choice_category_keyboard()
        )


def input_name(message):
    name = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.name = name
        bio.save()
        bot.send_message(message.chat.id, f'–í–∞—à–µ –∏–º—è –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {name} ‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


def input_phone(message):
    phone = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.phone = phone
        bio.save()
        bot.send_message(message.chat.id, f'–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {phone} ‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


def input_instagram(message):
    instagram = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.instagram = instagram
        bio.save()
        bot.send_message(message.chat.id, f'–í–∞—à Instagram –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {instagram} ‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


def input_tiktok(message):
    tiktok = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.tiktok = tiktok
        bio.save()
        bot.send_message(message.chat.id, f'–í–∞—à TikTok –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {tiktok} ‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


def input_about(message):
    about = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.about = about
        bio.save()
        bot.send_message(message.chat.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞:\n\n{about}\n\n‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


def input_portfolio(message):
    portfolio = message.text
    user_id: int = message.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    try:
        bio.portfolio = portfolio
        bio.save()
        bot.send_message(message.chat.id, f'–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {portfolio} ‚úÖ')
        bot.send_message(
            message.chat.id,
            '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
            reply_markup=edit_profile_keyboard()
        )
        bot.send_message(
            message.chat.id,
            '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
        )
    except:
        bot.send_message(message.chat.id, '–£–ø—Å ... –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return


@bot.callback_query_handler(func=lambda call: call.data.startswith('choice_category_'))
def edit_profile_category_handler(call: CallbackQuery):
    user_id: int = call.from_user.id
    user: str = User.get_or_none(User.user_id == user_id)
    bio = Bio.get_or_none(Bio.user == user)
    if call.data == 'choice_category_1':
        bio.category = '–í–æ–∫–∞–ª–∏—Å—Ç—ã'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–í–æ–∫–∞–ª–∏—Å—Ç—ã¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_2':
        bio.category = '–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_3':
        bio.category = '–î—É—ç—Ç'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–î—É—ç—Ç¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_4':
        bio.category = '–õ–∞–π–≤-–±—ç–Ω–¥'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–õ–∞–π–≤-–±—ç–Ω–¥¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_5':
        bio.category = '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_6':
        bio.category = '–í–µ–¥—É—â–∏–µ'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–í–µ–¥—É—â–∏–µ¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_7':
        bio.category = '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_8':
        bio.category = '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_9':
        bio.category = '–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_10':
        bio.category = '–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_11':
        bio.category = '–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_12':
        bio.category = '–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_13':
        bio.category = '–ê–Ω–∏–º–∞—Ç–æ—Ä—ã'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–ê–Ω–∏–º–∞—Ç–æ—Ä—ã¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_14':
        bio.category = '–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_15':
        bio.category = '–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞¬ª ‚úÖ',
        )
    elif call.data == 'choice_category_16':
        bio.category = '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã'
        bio.save()
        bot.send_message(
            call.message.chat.id,
            '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã¬ª ‚úÖ',
        )

    bot.send_message(
        call.message.chat.id,
        '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å üëáüèª',
        reply_markup=edit_profile_keyboard()
    )
    bot.send_message(
        call.message.chat.id,
        '–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /search üîç'
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('user_details_'))
def handle_user_details(call: CallbackQuery):
    user_id = int(call.data.split('_')[2])

    bio = Bio.get_or_none(Bio.user == user_id)

    name = bio.name if bio and bio.name else '‚Äî'
    category = bio.category if bio and bio.category else '‚Äî'
    phone = bio.phone if bio and bio.phone else '‚Äî'
    instagram = bio.instagram if bio and bio.instagram else '‚Äî'
    tiktok = bio.tiktok if bio and bio.tiktok else '‚Äî'
    about = bio.about if bio and bio.about else '‚Äî'

    if bio:
        full_description = (
            f"–ò–º—è: {name}\n"
            f"–†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {category}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"Instagram: {instagram}\n"
            f"TikTok: {tiktok}\n"
            f"–û —Å–µ–±–µ: {about}\n"
        )

        user_profile_photos = bot.get_user_profile_photos(user_id)
        if user_profile_photos.photos:
            photo_file_id = user_profile_photos.photos[0][0].file_id
            bot.send_photo(
                call.message.chat.id,
                photo=photo_file_id,
                caption=full_description
            )
            if bio.portfolio:
                markup = InlineKeyboardMarkup()
                markup.row_width = 1
                markup.add(
                    InlineKeyboardButton(
                        'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ',
                        url=bio.portfolio
                    )
                )
                bot.send_message(
                    call.message.chat.id,
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:',
                    reply_markup=markup
                )
        else:
            bot.send_message(
                call.message.chat.id,
                full_description
            )

        markup = InlineKeyboardMarkup()

        links_back = {
            '–í–æ–∫–∞–ª–∏—Å—Ç—ã': 'musicians_1',
            '–í–æ–∫–∞–ª–∏—Å—Ç–∫–∏': 'musicians_2',
            '–î—É—ç—Ç': 'musicians_3',
            '–õ–∞–π–≤-–±—ç–Ω–¥': 'musicians_4',
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–Ω—Å–∞–º–±–ª–∏': 'musicians_5',
            '–í–µ–¥—É—â–∏–µ': 'category_2',
            '–í–∏–¥–µ–æ–≥—Ä–∞—Ñ–∏—è': 'media_1',
            '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è': 'media_2',
            '–ú–æ–±–∏–ª–æ–≥—Ä–∞—Ñ–∏—è': 'media_3',
            '–û—Ñ–æ—Ä–º–∏—Ç–µ–ª–∏': 'category_4',
            '–¢–∞–Ω—Ü–æ—Ä—ã –∏ —à–æ—É –±–∞–ª–µ—Ç': 'category_5',
            '–î–∏-–¥–∂–µ–∏ –∏ —Ç–∞–ø–µ—Ä—ã': 'category_6',
            '–ê–Ω–∏–º–∞—Ç–æ—Ä—ã': 'category_7',
            '–®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º–∞': 'category_8',
            '–ü—Ä–æ–∫–∞—Ç, –∞—Ä–µ–Ω–¥–∞': 'category_9',
            '–ë–∞–Ω–∫–µ—Ç–Ω—ã–µ –∑–∞–ª—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã': 'category_10',
        }

        back_button = InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=links_back[category]
        )
        markup.add(back_button)

        bot.send_message(
            call.message.chat.id,
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=markup
        )
    else:
        bot.send_message(
            call.message.chat.id,
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        )


@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, '
                                      '–Ω–∞–ø—Ä–∏–º–µ—Ä: /start –∏–ª–∏ /help.')


def run_bot():
    try:
        create_models()
        bot.set_my_commands([BotCommand(*cmd) for cmd in DEFAULT_COMMANDS])
        bot.infinity_polling()
    except Exception as e:
        logging.error(f"Bot crashed: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    while True:
        try:
            run_bot()
        except Exception as e:
            logging.error(f"Bot crashed and will restart: {str(e)}")
            time.sleep(5)
